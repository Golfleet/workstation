---
- name: Preparando estação de trabalho ZorinOS 17.2 v1.3
  hosts: localhost
  connection: local
  become: true
  vars:
    so_user: 
    repo_url: 
    repo_user: 
    repo_pass: 
  tasks:
    - block:
      - name: Verificando se existe instalador para o repositório do zabbix-agent2
        stat:
          path: '/home/{{ so_user }}/Downloads/zabbix-agent2.deb'
        register: zabbixagent2
      - name: Tentando baixar o instalador de repositório do zabbix-agent2 
        get_url:
          url: 'https://repo.zabbix.com/zabbix/6.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.4-1+ubuntu22.04_all.deb'
          dest: '/home/{{ so_user }}/Downloads/zabbix-agent2.deb'
        when: not zabbixagent2.stat.exists
      - name: Garantindo que o repositório do zabbix-agent2 esteja instalado
        shell: 'dpkg -i /home/{{ so_user }}/Downloads/zabbix-agent2.deb'
      - name: Atualizando repositórios
        apt:
          update_cache: yes
    - name: Garantindo instalação de pacotes básicos do linux
      package:
        name: '{{ item }}'
        install_recommends: yes
        state: present
      loop:
          - vim
          - htop
          - btop
          - curl
          - wget
          - ncdu
          - tree
          - libgtk2.0-0:i386
          - libqt5webkit5
          - vlc
          - flameshot
          - gdebi
          - zabbix-agent2
          - default-jre
    - name: Define gdebi como padrão para pacotes instalação de pacotes .deb
      become: false
      shell: 'xdg-mime default gdebi.desktop application/vnd.debian.binary-package'
    - name: Cria atalho tecla Print para flameshot
      become: false
      shell: |
        gsettings set org.gnome.settings-daemon.plugins.media-keys screenshot '[]'
        gsettings set org.gnome.settings-daemon.plugins.media-keys custom-keybindings "['/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/']"
        gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ name 'flameshot'
        gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ command 'flameshot gui'
        gsettings set org.gnome.settings-daemon.plugins.media-keys.custom-keybinding:/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/custom0/ binding 'Print'
    - block:
      - name: Tentando baixar o Wallpaper
        get_url:
          url: 'https://{{ repo_url }}/public/wallpaper.png'
          dest: '/home/{{ so_user }}/wallpaper.png'
          owner: '{{ so_user }}'
          group: '{{ so_user }}'
      - name: Definindo Wallpaper
        become: false
        shell: 'gsettings set org.gnome.desktop.background picture-uri "file:///home/{{ so_user }}/wallpaper.png" && gsettings set org.gnome.desktop.background picture-uri-dark "file:///home/{{ so_user }}/wallpaper.png"'
    - block:
      - name: Tentando baixar o Atalho 3CX
        get_url:
          url: 'https://{{ repo_url }}/3CX.desktop'
          dest: '/home/{{ so_user }}/Área de Trabalho/'
          username: '{{ repo_user }}'
          password: '{{ repo_pass }}'
          owner: '{{ so_user }}'
          group: '{{ so_user }}'
      - name: Garantindo que exista o diretório icons
        file:
          path: '/home/{{ so_user }}/.local/share/icons/'
          owner: '{{ so_user }}'
          group: '{{ so_user }}'
          state: directory
      - name: Tentando baixar o icone 3CX
        get_url:
          url: 'https://{{ repo_url }}/public/3CX.png'
          dest: '/home/{{ so_user }}/.local/share/icons/3cx.png'
          owner: '{{ so_user }}'
          group: '{{ so_user }}'
    - block:
      - name: Verificando se o NetExtender já está instalado
        stat:
          path: '/usr/share/netExtender'
        register: netextender_installed
      - name: Verificando se existe instalador para o netextender
        stat:
          path: '/home/{{ so_user }}/Downloads/netextender.tgz'
        register: netextender
      - name: Tentando baixar o NetExtender
        get_url:
          url: 'https://{{ repo_url }}/netextender.tgz'
          dest: "/home/{{ so_user }}/Downloads/netextender.tgz"
          username: '{{ repo_user }}'
          password: '{{ repo_pass }}'
        when: not netextender.stat.exists
      - name: Tentando baixar o NetExtender config
        get_url:
          url: 'https://{{ repo_url }}/netextender.conf'
          dest: '/home/{{ so_user }}/.netextender'
          username: '{{ repo_user }}'
          password: '{{ repo_pass }}'
      - name: Tentando extrair NetExtender tgz
        unarchive:
          src: '/home/{{ so_user }}/Downloads/netextender.tgz'
          dest: '/home/{{ so_user }}/Downloads/'
          remote_src: yes
        when: not netextender_installed.stat.exists
      - name: Tentando instalar o NetExtender
        command:
          cmd: './install'
          chdir: '/home/{{ so_user }}/Downloads/netExtenderClient'
        when: not netextender_installed.stat.exists
      - name: Tentando baixar o Atalho NetExtender CLI
        get_url:
          url: 'https://{{ repo_url }}/vpn.desktop'
          dest: '/home/{{ so_user }}/Área de Trabalho/'
          username: '{{ repo_user }}'
          password: '{{ repo_pass }}'
          owner: '{{ so_user }}'
          group: '{{ so_user }}'
          mode: '0755'
      - name: Tentando baixar o script para NetExtender
        get_url:
          url: 'https://{{ repo_url }}/vpn-golfleet.sh'
          dest: '/usr/local/bin/vpn-golfleet.sh'
          username: '{{ repo_user }}'
          password: '{{ repo_pass }}'
          mode: '0755'
    - block:
      - name: Tentando baixar o config do zabbix-agent2
        get_url:
          url: 'https://{{ repo_url }}/zabbix/zabbix_agent2.conf'
          dest: '/etc/zabbix/zabbix_agent2.conf'
          username: '{{ repo_user }}'
          password: '{{ repo_pass }}'
      - name: Tentando baixar o key.psk do zabbix-agent2
        get_url:
          url: 'https://{{ repo_url }}/zabbix/key.psk'
          dest: '/etc/zabbix/key.psk'
          username: '{{ repo_user }}'
          password: '{{ repo_pass }}'
      - name: Reiniciando e habilitando o serviço do zabbix-agent2
        service:
          name: zabbix-agent2
          state: restarted
          enabled: yes
    - block:
      - name: Garantindo que a chave para o repositório Google esteja presente
        apt_key: 
          url: 'https://dl.google.com/linux/linux_signing_key.pub'
          state: present
      - name: Garantindo que o repositório do Google esteja presente
        apt_repository:
          repo: 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main'
          state: present
          filename: google-chrome
      - name: Garantindo que o navegador Google Chrome esteja instalado
        apt:
          name: google-chrome-stable
      - name: Garantido que exista atalho para o Google Chrome
        copy:
          src: /usr/share/applications/google-chrome.desktop
          dest: '/home/{{ so_user }}/Área de Trabalho/'
          owner: '{{ so_user }}'
          group: '{{ so_user }}'
          mode: '0775'
    - block:
      - name: Verificando se existe instalador para o Sankhya
        stat:
          path: '/home/{{ so_user }}/Downloads/sankhya.tar.gz'
        register: sankhya
      - name: Verificando se o Sankhya já está instalado
        stat:
          path: '/home/{{ so_user }}/Sankhya'
        register: sankhya_installed
      - name: Tentando baixar o Sankhya 
        get_url:
          url: 'https://{{ repo_url }}/sankhya.tar.gz'
          dest: '/home/{{ so_user }}/Downloads/sankhya.tar.gz'
          username: '{{ repo_user }}'
          password: '{{ repo_pass }}'
        when: not sankhya.stat.exists
      - name: Tentando baixar o Sankhya webclient.db
        get_url:
          url: 'https://{{ repo_url }}/webclient.db'
          dest: '/home/{{ so_user }}/Downloads/webclient.db'
          username: '{{ repo_user }}'
          password: '{{ repo_pass }}'
      - name: Tentando extrair tar.gz do Sankhya
        unarchive:
          src: '/home/{{ so_user }}/Downloads/sankhya.tar.gz'
          dest: '/home/{{ so_user }}'
        when: not sankhya_installed.stat.exists
      - name: Renomeando diretório do Sankhya
        shell: 'mv /home/{{ so_user }}/*Sankhya* /home/{{ so_user }}/Sankhya'
        when: not sankhya_installed.stat.exists
      - name: Garantindo owner do diretório Sankhya
        file:
          path: '/home/{{ so_user }}/Sankhya'
          owner: '{{ so_user }}'
          group: '{{ so_user }}'
          state: directory
          recurse: yes
      - name: Garantindo que exista o diretório DB Sankhya
        file:
          path: '/home/{{ so_user }}/.config/Navegador/Sankhya/db/'
          owner: '{{ so_user }}'
          group: '{{ so_user }}'
          state: directory
      - name: Garantido que exista arquivo de configuração do Sankhya
        copy:
          src: '/home/{{ so_user }}/Downloads/webclient.db'
          dest: '/home/{{ so_user }}/.config/Navegador/Sankhya/db/webclient.db'
          owner: '{{ so_user }}'
          group: '{{ so_user }}'
          mode: '0664'
      - name: Garantido que exista atalho para o Sankhya
        template:
          src: files/Sankhya.desktop.j2
          dest: '/home/{{ so_user }}/Área de Trabalho/Sankhya.desktop'
          owner: '{{ so_user }}'
          group: '{{ so_user }}'
          mode: '0775'
    - block:
      - name: Verificando se existe instalador para o Discord
        stat:
          path: '/home/{{ so_user }}/Downloads/discord.deb'
        register: discord
      - name: Tentando baixar o Discord
        get_url:
          url: 'https://{{ repo_url }}/public/discord.deb'
          dest: '/home/{{ so_user }}/Downloads/discord.deb'
        when: not discord.stat.exists
      - name: Garantindo que o Discord esteja instalado
        apt:
          deb: '/home/{{ so_user }}/Downloads/discord.deb'
      - name: Garantido que exista atalho para o Discord
        copy:
          src: /usr/share/applications/discord.desktop
          dest: '/home/{{ so_user }}/Área de Trabalho/'
          owner: '{{ so_user }}'
          group: '{{ so_user }}'
          mode: '0775'
    - block:
      - name: Verificando se existe instalador para o Anydesk
        stat:
          path: '/home/{{ so_user }}/Downloads/anydesk.deb'
        register: anydesk
      - name: Tentando baixar o Anydesk
        get_url:
          url: 'https://{{ repo_url }}/public/anydesk.deb'
          dest: '/home/{{ so_user }}/Downloads/anydesk.deb'
        when: not anydesk.stat.exists
      - name: Garantindo que o Anydesk esteja instalado
        apt:
          deb: '/home/{{ so_user }}/Downloads/anydesk.deb'
    - block:
      - name: Verificando se o agente do MeshCentral está instalado
        stat:
          path: /usr/local/mesh_services/meshagent
        register: meshcentral
      - name: Tentando baixar o agente do MeshCentral
        get_url:
          url: 'https://{{ repo_url }}/meshinstall.sh'
          dest: '/home/{{ so_user }}/Downloads/meshinstall.sh'
          username: '{{ repo_user }}'
          password: '{{ repo_pass }}'
        when: not meshcentral.stat.exists
      - name: Garantindo que o meshinstall.sh possa ser executado
        file:
          path: '/home/{{ so_user }}/Downloads/meshinstall.sh'
          owner: '{{ so_user }}'
          group: '{{ so_user }}'
          mode: '0755'
      - name: Tentando instalar o agente do MeshCentral
        shell: 'sudo -E /home/{{ so_user }}/Downloads/meshinstall.sh install'
        args:
          warn: false
        when: not meshcentral.stat.exists
    - block:
      - name: Garantindo configuração de memória swap
        lineinfile:
          path: /etc/sysctl.conf
          line: "vm.swappiness = 0"
          state: present
    - block:
      - name: Garantindo permissão de su para o usuário corrente
        shell: 'echo "{{ so_user }} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/{{ so_user }} && chmod 440 /etc/sudoers.d/{{ so_user }}'
        args:
          warn: false
