---
- name: Preparando estação de trabalho POP_OS! 22.04 - v1.0
  hosts: localhost
  connection: local
  become: true
  vars:
    so_user: 
    repo_url: 
    repo_user: 
    repo_pass: 
  tasks:
    - block:
      - name: Verificando se existe instalador para o repositório do zabbix-agent2
        stat:
          path: '/home/{{ so_user }}/Downloads/zabbix-agent2.deb'
        register: zabbixagent2
      - name: Tentando baixar o instalador de repositório do zabbix-agent2 
        get_url:
          url: 'https://repo.zabbix.com/zabbix/6.4/ubuntu/pool/main/z/zabbix-release/zabbix-release_6.4-1+ubuntu22.04_all.deb'
          dest: '/home/{{ so_user }}/Downloads/zabbix-agent2.deb'
        when: not zabbixagent2.stat.exists
      - name: Garantindo que o repositório do zabbix-agent2 esteja instalado
        shell: 'dpkg -i /home/{{ so_user }}/Downloads/zabbix-agent2.deb'
      - name: Atualizando repositórios
        apt:
          update_cache: yes
    - name: Garantindo instalação de pacotes básicos do linux
      package:
        name: '{{ item }}'
        install_recommends: yes
        state: present
      loop:
          - vim
          - htop
          - curl
          - wget
          - tree
          - libqt5webkit5
          - libwebkit2gtk-4.1-0
          - vlc
          - flameshot
          - zabbix-agent2
          - solaar
          - obs-studio
          - qbittorrent
          - wireshark
          - virtualbox
          - tilix
          - kazam
          - peek
    - block:
      - name: Tentando baixar o config do zabbix-agent2
        get_url:
          url: 'https://{{ repo_url }}/zabbix/zabbix_agent2.conf'
          dest: '/etc/zabbix/zabbix_agent2.conf'
          username: '{{ repo_user }}'
          password: '{{ repo_pass }}'
      - name: Tentando baixar o key.psk do zabbix-agent2
        get_url:
          url: 'https://{{ repo_url }}/zabbix/key.psk'
          dest: '/etc/zabbix/key.psk'
          username: '{{ repo_user }}'
          password: '{{ repo_pass }}'
      - name: Reiniciando e habilitando o serviço do zabbix-agent2
        service:
          name: zabbix-agent2
          state: restarted
          enabled: yes
    - block:
      - name: Verificando se existe instalador para o GlobalProtect
        stat:
          path: '/home/{{ so_user }}/Downloads/globalprotect.deb'
        register: globalprotect
      - name: Tentando baixar o GlobalProtect
        get_url:
          url: 'https://{{ repo_url }}/globalprotect.deb'
          dest: '/home/{{ so_user }}/Downloads/globalprotect.deb'
          username: '{{ repo_user }}'
          password: '{{ repo_pass }}'
        when: not globalprotect.stat.exists
      - name: Garantindo que o GlobalProtect esteja instalado
        shell: 'dpkg -i /home/{{ so_user }}/Downloads/globalprotect.deb'
    - block:
      - name: Garantindo que a chave para o repositório Google esteja presente
        apt_key: 
          url: 'https://dl.google.com/linux/linux_signing_key.pub'
          state: present
      - name: Garantindo que o repositório do Google esteja presente
        apt_repository:
          repo: 'deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main'
          state: present
          filename: google-chrome
      - name: Garantindo que o navegador Google Chrome esteja instalado
        apt:
          name: google-chrome-stable
    - block:
      - name: Garantindo que a chave para o repositório Brave esteja presente
        get_url:
          url: https://brave-browser-apt-release.s3.brave.com/brave-browser-archive-keyring.gpg
          dest: /usr/share/keyrings/brave-browser-archive-keyring.gpg
          mode: 0644
      - name: Importando o Brave archive keyring
        apt_key:
          file: /usr/share/keyrings/brave-browser-archive-keyring.gpg
          state: present
      - name: Garantindo que o repositório do Brave esteja presente
        apt_repository:
          repo: 'deb [signed-by=/usr/share/keyrings/brave-browser-archive-keyring.gpg] https://brave-browser-apt-release.s3.brave.com/ stable main'
          state: present
          filename: brave-browser-release
      - name: Garantindo que o Brave esteja instalado
        apt:
          name: brave-browser
    - block:
      - name: Garantindo que a chave para o repositório OpenVPN esteja presente
        get_url:
          url: https://packages.openvpn.net/packages-repo.gpg
          dest: /usr/share/keyrings/openvpn.asc
          mode: 0644
      - name: Importando o OpenVPN archive keyring
        apt_key:
          file: /usr/share/keyrings/openvpn.asc
          state: present
      - name: Garantindo que o repositório do OpenVPN esteja presente
        apt_repository:
          repo: 'deb [signed-by=/usr/share/keyrings/openvpn.asc] https://packages.openvpn.net/openvpn3/debian jammy main'
          state: present
          filename: openvpn-packages
      - name: Garantindo que o OpenVPN esteja instalado
        apt:
          name: openvpn3
    - block:
      - name: Verificando se existe instalador para o RDM
        stat:
          path: '/home/{{ so_user }}/Downloads/RDM.deb'
        register: RDM
      - name: Tentando baixar o RDM
        get_url:
          url: 'https://cdn.devolutions.net/download/Linux/RDM/2024.1.0.8/RemoteDesktopManager_2024.1.0.8_amd64.deb'
          dest: '/home/{{ so_user }}/Downloads/RDM.deb'
        when: not RDM.stat.exists
      - name: Garantindo que o RDM esteja instalado
        shell: 'dpkg -i /home/{{ so_user }}/Downloads/RDM.deb'
    - block:
      - name: Verificando se o agente do MeshCentral está instalado
        stat:
          path: /usr/local/mesh_services/meshagent
        register: meshcentral
      - name: Tentando baixar o agente do MeshCentral
        get_url:
          url: 'https://{{ repo_url }}/meshinstall.sh'
          dest: '/home/{{ so_user }}/Downloads/meshinstall.sh'
          username: '{{ repo_user }}'
          password: '{{ repo_pass }}'
        when: not meshcentral.stat.exists
      - name: Garantindo que o meshinstall.sh possa ser executado
        file:
          path: '/home/{{ so_user }}/Downloads/meshinstall.sh'
          owner: '{{ so_user }}'
          group: '{{ so_user }}'
          mode: '0755'
      - name: Tentando instalar o agente do MeshCentral
        shell: 'sudo -E /home/{{ so_user }}/Downloads/meshinstall.sh install'
        args:
          warn: false
        when: not meshcentral.stat.exists
    - block:
      - name: Garantindo configuração de memória swap
        lineinfile:
          path: /etc/sysctl.conf
          line: "vm.swappiness = 0"
          state: present
    - block:
      - name: Garantindo permissão de su para o usuário corrente
        shell: 'echo "{{ so_user }} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/{{ so_user }} && chmod 440 /etc/sudoers.d/{{ so_user }}'
        args:
          warn: false
    - name: Garantindo instalação de pacotes via flatpak
      flatpak:
        name: '{{ item }}'
        state: present
      loop:
        - com.getpostman.Postman
        - com.spotify.Client
        - com.sublimetext.three
        - com.visualstudio.code
        - com.discordapp.Discord
        - us.zoom.Zoom
        - md.obsidian.Obsidian
        - dev.k8slens.OpenLens
        - com.dropbox.Client
